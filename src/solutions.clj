;; Problem(1): Add all the natural numbers below one thousand that are multiples of 3 or 5
;; Answer: 166833
;; Explanation: a straight forward application of `filter` and `reduce` to the `range` of numbers
;;  between 0 and 999 inclusive
(reduce
  +
  (filter
    (fn [x] (or (= 0 (mod x 3))(= 0 (mod x 5))))
    (range 1000)))

;; Problem(2): By considering the terms in the Fibonacci sequence whose values do not exceed four million,
;;  find the sum of the even-valued terms.
;; Answer: 4613732
;; Explanation:
;;  1) we define a function `fib` which returns the nth Fibonacci number using the standard recursive definition
;;  2) we define `fibs` and bind it to an infinite, lazy sequence of Fibonacci numbers generated by mapping
;;     the elements of the infinite, lazy sequence `(range)` with our `fib` implementation. n.b. this is not
;;     very efficient at all because `fib` was not implemented with any kind of memoization, so we repeat
;;     term calculations over and over again.
;;  3) now we can easily apply `take-while`, `filter`, and `reduce` to `fibs` to get our answer
(defn fib [n]
  (cond
    (= n 1) 1
    (= n 2) 2
    :else (+ (fib (- n 1)) (fib (- n 2)))))
(def fibs (map (fn [i] (fib (+ i 1))) (range)))
(reduce
  +
  (filter
    even?
    (take-while
      (fn [x] (< x 4000000))
      fibs)))

